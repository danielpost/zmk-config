/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define NAV  1


&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

#define AS(keycode) &as LS(keycode) keycode


/ {
    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <135>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    combos {
        compatible = "zmk,combos";
        /* KEY POSITIONS
          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
                      ╰────────╯ ╰────────╯            */
        combo_esc {
            timeout-ms = <50>;
            key-positions = <31 32>;
            bindings = <&kp ESC>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp      AS(Q) &kp AS(W) &kp AS(F) &kp AS(P) &kp AS(B)      &kp AS(J) &kp AS(L) &kp AS(U) &kp AS(Y) &kp SQT
&mt LSFT AS(A) &kp AS(R) &kp AS(S) &kp AS(T) &kp AS(G)      &kp AS(M) &kp AS(N) &kp AS(E) &kp AS(I) &mt RSFT AS(O)
&kp      AS(Z) &kp AS(X) &kp AS(C) &kp AS(D) &kp AS(V)      &kp AS(K) &kp AS(H) &kp CMMA  &kp DOT   &kp FSLH
                    &lt NAV TAB &kp SPC  				&kp LCTL &mo 2

            >; };

        nav {
            bindings = <
&kp NUM_1  &kp NUM_2    &kp NUM_3    &kp NUM_4    &kp NUM_5		&kp NUM_6 &kp NUM_7 &kp NUM_8 &kp NUM_9 &kp NUM_0
&kp TAB    &kp LC(S)    &kp DQT      &kp PIPE2     &kp HASH 		&kp MINUS &kp EQL  &kp LBKT &kp RBKT  &kp DEL
&kp ESC    &kp TILDE 	&kp NON_US_BSLH &kp NON_US_HASH  &kp TILDE2 	&kp MINUS &kp GRAVE &kp LBKT &kp RBKT  &kp DEL
                &mo 1  &kp LGUI  					&kp RGUI &mo 2
            >; };

        right_layer {
            bindings = <
&kp BANG  &kp ATSN &kp HASH  &kp DLLR  &kp PRCT    			&kp CRRT  &kp AMPS &kp KMLT &kp LPRN &kp RPRN
&kp HASH  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN 			&kp MINUS &kp KP_EQUAL  &kp LBRC  &kp RBRC   &kp BKSP
&kp LSFT  &kp KPLS &kp LBKT &kp RBKT   &kp BSLH    			&kp UNDER &kp LEFT &kp DOWN &kp UP  &kp RIGHT
                &kp F &kp LCTL  				&kp SPC  &mo 2
            >; };

        // tri_layer {
        // bindings = <
        // &kp NUM_1  &kp NUM_2    &kp NUM_3    &kp NUM_4    &kp NUM_5 			&trans &trans   &trans   &trans  &trans
        // &kp F1 &kp F2 &kp F3 &kp F4 &kp F5  						&trans &kp PG_UP  &kp K_VOL_UP &kp K_MUTE &trans
        // &bt BT_CLR  &bt BT_NXT &bt BT_PRV &kp F6 &kp F7   				&trans &kp PG_DN  &kp K_VOL_DN  &trans &trans
        //              &trans &trans  					&trans &trans
        // >;
        // };

    };
};
